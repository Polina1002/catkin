// Generated by gencpp from file study_pkg/LearningGoal.msg
// DO NOT EDIT!


#ifndef STUDY_PKG_MESSAGE_LEARNINGGOAL_H
#define STUDY_PKG_MESSAGE_LEARNINGGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace study_pkg
{
template <class ContainerAllocator>
struct LearningGoal_
{
  typedef LearningGoal_<ContainerAllocator> Type;

  LearningGoal_()
    : target_accuracy(0.0)  {
    }
  LearningGoal_(const ContainerAllocator& _alloc)
    : target_accuracy(0.0)  {
  (void)_alloc;
    }



   typedef float _target_accuracy_type;
  _target_accuracy_type target_accuracy;





  typedef boost::shared_ptr< ::study_pkg::LearningGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::study_pkg::LearningGoal_<ContainerAllocator> const> ConstPtr;

}; // struct LearningGoal_

typedef ::study_pkg::LearningGoal_<std::allocator<void> > LearningGoal;

typedef boost::shared_ptr< ::study_pkg::LearningGoal > LearningGoalPtr;
typedef boost::shared_ptr< ::study_pkg::LearningGoal const> LearningGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::study_pkg::LearningGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::study_pkg::LearningGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::study_pkg::LearningGoal_<ContainerAllocator1> & lhs, const ::study_pkg::LearningGoal_<ContainerAllocator2> & rhs)
{
  return lhs.target_accuracy == rhs.target_accuracy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::study_pkg::LearningGoal_<ContainerAllocator1> & lhs, const ::study_pkg::LearningGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace study_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::study_pkg::LearningGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::study_pkg::LearningGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::study_pkg::LearningGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::study_pkg::LearningGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::study_pkg::LearningGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::study_pkg::LearningGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::study_pkg::LearningGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01862dc6d0b75f2ce1fc83b2e93b6318";
  }

  static const char* value(const ::study_pkg::LearningGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01862dc6d0b75f2cULL;
  static const uint64_t static_value2 = 0xe1fc83b2e93b6318ULL;
};

template<class ContainerAllocator>
struct DataType< ::study_pkg::LearningGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "study_pkg/LearningGoal";
  }

  static const char* value(const ::study_pkg::LearningGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::study_pkg::LearningGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"float32 target_accuracy\n"
;
  }

  static const char* value(const ::study_pkg::LearningGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::study_pkg::LearningGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_accuracy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LearningGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::study_pkg::LearningGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::study_pkg::LearningGoal_<ContainerAllocator>& v)
  {
    s << indent << "target_accuracy: ";
    Printer<float>::stream(s, indent + "  ", v.target_accuracy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STUDY_PKG_MESSAGE_LEARNINGGOAL_H
